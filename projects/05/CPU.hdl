// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* 
C instruction: 1xxaccccccdddjjj

* 1xx    - defines this as a C instruction (if it were 0xx it would be an A-Instructions)
*          Note that the c input for the first MUX gate is the first bit as this will determine
*          whether we use the ALU output or the inputted instruction as input for the A register

? a      - changes what computation we do in the ALU (see below table)

? cccccc - used in conjunction with a - see table

* ddd    - the destination of our operation - see other table

! jjj    - the jump thingy (see other other table) 
!          This part is for when we do jumps in our ASM code 
!          (Like JCT, JMP, etc)
*/

/*
!!! TABLES !!!

? COMPUTATIONS (a, cccccc)
?   comp    | c c c c c c | NOTES
?-----|-----|-------------|---------->
?  0  |     | 1 0 1 0 1 0 | Zeroes x and y, adds both (0 + 0)
?  1  |     | 1 1 1 1 1 1 | Zeroes and Negates both x and y, adds both and negate output (results in 1)
? -1  |     | 1 1 1 0 1 0 | Zeroes both, negates only x, does not negate final answer, results in -1
?  D  |     | 0 0 1 1 0 0 | Zeroes and negates y only, results in x (D)
?  A  |  M  | 1 1 0 0 0 0 | Zeroes and negates x only, results in y (A or M)
? !D  |     | 0 0 1 1 0 1 | etc...
? !A  | !M  | 1 1 0 0 0 1 |
? -D  |     | 0 0 1 1 1 1 |
? -A  | -M  | 1 1 0 0 1 1 |
? D+1 |     | 0 1 1 1 1 1 |
? A+1 | M+1 | 1 1 0 1 1 1 |
? D-1 |     | 0 0 1 1 1 0 |
? A-1 | M-1 | 1 1 0 1 1 1 |
? D+A | D+M | 0 0 0 0 1 0 |
? D-A | D-M | 0 1 0 0 1 1 |
? A-D | M-D | 0 0 0 1 1 1 |
? D&A | D&M | 0 0 0 0 0 0 |
? D|A | D|M | 0 1 0 1 0 1 |
?-----|-----|-------------|---------->
? a=0 | a=1 |             |
? Notes:
? C values directly map to ALU Parameters:
? c  c  c  c  c  c
? zx nx zy ny f  no
? zx - zero the x input (set to 0)
? nx - negate the x input (not x)
? zy - zero y
? ny - negate y
? f  - decides on function to run (x + y if 1, x AND y if 0)
? no - negate output
?
? a switches between A and M (A when a=0, M when a=1) 


* DESTINATION
* NOTES: First digit is A, second is D, third is M
*        M affects writeM
*        D register (load)
*        A register (load)

! Jumps
! First digit is less than
! Second is equal to
! Third is more than

*/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS: // see diagram on book page 85 (fig 5.8)
    // Put your code here:

    // * Decides between A and C instructions
    DMux(in=true, sel=instruction[15], a=selA, b=selC); 

    // * parses A instruction (removes leading digit)
    Mux16(a=false, b[0..14]=instruction[0..14], sel=selA, out=Ainstruction);    

    // * splits the C instruction into its respective parts
    Mux16(
        a=false, 
        b[0..12]=instruction[0..12], 
        sel=selC,
        out[0]=j3,
        out[1]=j2,
        out[2]=j1,
        out[3]=d3, 
        out[3]=writeM,
        out[4]=d2,
        out[5]=d1,
        out[6]=c6,
        out[7]=c5,
        out[8]=c4,
        out[9]=c3,
        out[10]=c2,
        out[11]=c1,
        out[12]=a
    ); 

    /*
    ? The D stuff
    * d1 = write to A register if this is 1
    * d2 = write to D register (cache) if this is 1
    * d3 = write to Memory
    */

    // ! The A register stuff:
    // THis gate decides whether to overwrite the A register
    Or(a=selA, b=d1, out=loadA); // either of these result in writing to A

    // This code decides which value to overwrite with
    Mux16(a=Ainstruction, b=ALUoutput, sel=d1, out=Areginput);

    // this is the actual A register, not much explanation needed here
    ARegister(in=Areginput, load=loadA, out=A, out[0..14]=addressM); // * BIG COMPONENT

    // ! The D register stuff:
    /*
    not a lot of extra stuff is needed here as the D register is fairly simple
    The reason the A register is complicated is because we can write to that 2 ways
    This only has one way
    */

    DRegister(in=ALUoutput, load=d2, out=D); 

    // ! Now onto the ALU

    /*
    The ALU takes 2 inputs
    One of these is the D register, which will always be an input
    The other is what we are going to call 'y' because of how the ALU works
    y is one of 2 values:
    * if a=0 y=A
    * if a=1 y=M
    */
    Mux16(a=A, b=inM, sel=a, out=y);

    // now we can feed everything into the ALU

    ALU(
        x=D, 
        y=y, 
        zx=c1, 
        nx=c2, 
        zy=c3, 
        ny=c4, 
        f=c5, 
        no=c6, 
        out=ALUoutput, 
        out=outM,
        zr=zr, 
        ng=ng
    );

    // ! Now for our favorite part, jump

    // we explain this up top, getting bored of typing lots of comments
    // for the following, we will use ASM terms to make this easy to read later

    // just some conditionals out of the ALU
    Not(in=ng, out=ALUpos); 
    Not(in=zr, out=ALUnz);

    And(a=j3, b=ALUpos, out=partialJGT); 
    And(a=partialJGT, b=ALUnz, out=JGT); // jump greater than 0

    And(a=j2, b=zr, out=JEQ); // jump if 0
    And(a=j1, b=ng, out=JLT); // jump if less than 0

    // those are all of our conditionals, now we just need to check if we jump:

    Or(a=JGT, b=JEQ, out=PJMP);
    Or(a=PJMP, b=JLT, out=JMP); // if this is 1 we jump
    
    // the following gate creates an additional conditional that tells us if we want to increment (If we arent jumpung)
    Not(in=JMP, out=increment);

    // the PC (the thingy that tells us what line of the rom we on)
    PC(in=A, load=JMP, inc=increment, reset=reset, out[0..14]=pc);
    // ? NOTE: the reasoning for 0..14 on the out is that an address (A value) cant have all 16 digits
}
