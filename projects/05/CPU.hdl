// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* 
C instruction: 1xxaccccccdddjjj

* 1xx    - defines this as a C instruction (if it were 0xx it would be an A-Instructions)
*          Note that the c input for the first MUX gate is the first bit as this will determine
*          whether we use the ALU output or the inputted instruction as input for the A register

? a      - changes what computation we do in the ALU (see below table)

? cccccc - used in conjunction with a - see table

* ddd    - the destination of our operation - see other table

! jjj    - the jump thingy (see other other table) 
!          This part is for when we do jumps in our ASM code 
!          (Like JCT, JMP, etc)
*/

/*
!!! TABLES !!!

? COMPUTATIONS (a, cccccc)
?   comp    | c c c c c c
?-----|-----|------------
?  0  |     | 1 0 1 0 1 0
?  1  |     | 1 1 1 1 1 1
? -1  |     | 1 1 1 0 1 0
?  D  |     | 0 0 1 1 0 0
?  A  |  M  | 1 1 0 0 0 0
? !D  |     | 0 0 1 1 0 1
? !A  | !M  | 1 1 0 0 0 1
? -D  |     | 0 0 1 1 1 1
? -A  | -M  | 1 1 0 0 1 1
? D+1 |     | 0 1 1 1 1 1
? A+1 | M+1 | 1 1 0 1 1 1
? D-1 |     | 0 0 1 1 1 0
? A-1 | M-1 | 1 1 0 1 1 1
? D+A | D+M | 0 0 0 0 1 0
? D-A | D-M | 0 1 0 0 1 1
? A-D | M-D | 0 0 0 1 1 1
? D&A | D&M | 0 0 0 0 0 0
? D|A | D|M | 0 1 0 1 0 1
?-----|-----|------------
? A=0 | A=1 |
? Notes:


* DESTINATION
* NOTES: First digit is A, second is D, third is M
*        M affects writeM
*        D register (load)
*        A register (load)

! Jumps
! First digit is less than
! Second is equal to
! Third is more than

*/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS: // see diagram on book page 85 (fig 5.8)
    // Put your code here:

    Not(in=instruction[0], out=notins0);

    Mux16(a=instruction, b=ALUOutput, sel=instruction[0], out=Address); // * leftmost MUX

    ARegister(in=Address, load=instruction[0], out=AOutput, out[1..15]=addressM); 

    Mux16(a=inM, b=AOutput, sel=instruction[3], out=ALUin); // * right mux (kinda in the middle)

    DRegister(in=ALUOutput, load=notins0, out=DOutput);

    PC(in=AOutput, load=false, inc=notins0, reset=reset, out[1..15]=pc);

    ALU(x=DOutput, y=ALUin, zx=inM[4], nx=inM[5], zy=inM[6], ny=inM[7], f=inM[8], no=inM[9], out=outM, out=ALUOutput, zr=zr, ng=ng);
}
